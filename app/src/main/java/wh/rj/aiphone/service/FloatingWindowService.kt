package wh.rj.aiphone.service

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.graphics.Color
import android.graphics.PixelFormat
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.provider.Settings
import android.view.Gravity
import android.view.MotionEvent
import android.view.View
import android.view.WindowManager
import android.widget.Button
import android.widget.LinearLayout
import android.widget.ScrollView
import android.widget.TextView
import android.widget.Toast
import androidx.core.app.NotificationCompat
import wh.rj.aiphone.R
import wh.rj.aiphone.utils.LogCollector

class FloatingWindowService : Service() {

    private var windowManager: WindowManager? = null
    private var floatingView: View? = null
    private var targetPackage: String = ""
    private val CHANNEL_ID = "FloatingWindowChannel"
    private var isExpanded = false
    private val handler = Handler(Looper.getMainLooper())
    private var resultTextView: TextView? = null
    private var statusTextView: TextView? = null
    private var elementCountTextView: TextView? = null
    
    companion object {
        private var instance: FloatingWindowService? = null
        private const val TAG = "FloatingWindow"
        
        fun getInstance(): FloatingWindowService? = instance
        
        fun stopExistingService() {
            instance?.stopSelf()
            instance = null
        }
    }
    
    override fun onCreate() {
        super.onCreate()
        // ÂÅúÊ≠¢‰πãÂâçÁöÑÂÆû‰æã
        stopExistingService()
        instance = this
        
        createNotificationChannel()
        LogCollector.addLog("I", TAG, "üöÄ ÊÇ¨ÊµÆÁ™óÊúçÂä°ÈáçÊñ∞ÂêØÂä®")
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        LogCollector.addLog("I", TAG, "üéØ ÊÇ¨ÊµÆÁ™óÊúçÂä°ÂêØÂä®ÂëΩ‰ª§")
        
        targetPackage = intent?.getStringExtra("target_package") ?: ""
        LogCollector.addLog("I", TAG, "üì± ÁõÆÊ†áÂ∫îÁî®Ôºö$targetPackage")
        
        if (Settings.canDrawOverlays(this)) {
            createNewFloatingWindow()
            startForegroundNotification()
            LogCollector.addLog("I", TAG, "‚úÖ ÊÇ¨ÊµÆÁ™óÂêØÂä®ÊàêÂäü")
        } else {
            LogCollector.addLog("E", TAG, "‚ùå Áº∫Â∞ëÊÇ¨ÊµÆÁ™óÊùÉÈôê")
            Toast.makeText(this, "‚ùå Áº∫Â∞ëÊÇ¨ÊµÆÁ™óÊùÉÈôê", Toast.LENGTH_LONG).show()
            stopSelf()
        }
        
        return START_STICKY
    }

    private fun createNewFloatingWindow() {
        try {
            LogCollector.addLog("I", TAG, "üîß ÂºÄÂßãÂàõÂª∫Êñ∞ÁöÑ Console ÊÇ¨ÊµÆÁ™ó")
            
            windowManager = getSystemService(WINDOW_SERVICE) as WindowManager
            
            // ÂàõÂª∫‰∏ªÂÆπÂô® - Console È£éÊ†º
            val mainContainer = LinearLayout(this).apply {
                orientation = LinearLayout.VERTICAL
                setBackgroundColor(Color.parseColor("#1E1E1E"))
                setPadding(0, 0, 0, 0)
                elevation = 12f
            }
            
            // Console Ê†áÈ¢òÊ†è
            val titleBar = LinearLayout(this).apply {
                orientation = LinearLayout.HORIZONTAL
                setBackgroundColor(Color.parseColor("#2D2D30"))
                setPadding(12, 8, 8, 8)
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
            }
            
            val titleText = TextView(this).apply {
                text = "üîç Element Inspector Console"
                setTextColor(Color.parseColor("#CCCCCC"))
                textSize = 12f
                gravity = Gravity.CENTER_VERTICAL
                typeface = android.graphics.Typeface.MONOSPACE
                layoutParams = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f)
            }
            
            val closeButton = Button(this).apply {
                text = "√ó"
                setTextColor(Color.parseColor("#CCCCCC"))
                setBackgroundColor(Color.TRANSPARENT)
                setPadding(8, 4, 8, 4)
                textSize = 16f
                setOnClickListener {
                    LogCollector.addLog("I", TAG, "‚ùå ÂÖ≥Èó≠ Console")
                    stopSelf()
                }
            }
            
            titleBar.addView(titleText)
            titleBar.addView(closeButton)
            
            // Console Â∑•ÂÖ∑Ê†è
            val toolBar = LinearLayout(this).apply {
                orientation = LinearLayout.HORIZONTAL
                setBackgroundColor(Color.parseColor("#2D2D30"))
                setPadding(8, 8, 8, 8)
            }
            
            val scanButton = Button(this).apply {
                text = "Scan"
                setTextColor(Color.parseColor("#00FF00"))
                setBackgroundColor(Color.parseColor("#3C3C3C"))
                setPadding(12, 6, 12, 6)
                textSize = 10f
                typeface = android.graphics.Typeface.MONOSPACE
                setOnClickListener {
                    addConsoleLog("[SCAN] Starting element detection...")
                    performDetection()
                }
            }
            
            val clickButton = Button(this).apply {
                text = "Click"
                setTextColor(Color.parseColor("#00BFFF"))
                setBackgroundColor(Color.parseColor("#3C3C3C"))
                setPadding(12, 6, 12, 6)
                textSize = 10f
                typeface = android.graphics.Typeface.MONOSPACE
                setOnClickListener {
                    addConsoleLog("[CLICK] Testing click function...")
                    performTestLike()
                }
            }
            
            val swipeButton = Button(this).apply {
                text = "Swipe"
                setTextColor(Color.parseColor("#FFD700"))
                setBackgroundColor(Color.parseColor("#3C3C3C"))
                setPadding(12, 6, 12, 6)
                textSize = 10f
                typeface = android.graphics.Typeface.MONOSPACE
                setOnClickListener {
                    addConsoleLog("[SWIPE] Testing swipe function...")
                    performSwipe()
                }
            }
            
            toolBar.addView(scanButton)
            toolBar.addView(clickButton)
            toolBar.addView(swipeButton)
            
            // Console ÊêúÁ¥¢Ê†è
            val searchBar = LinearLayout(this).apply {
                orientation = LinearLayout.HORIZONTAL
                setBackgroundColor(Color.parseColor("#252526"))
                setPadding(8, 8, 8, 8)
            }
            
            val filterLabel = TextView(this).apply {
                text = "Filter:"
                setTextColor(Color.parseColor("#569CD6"))
                textSize = 10f
                typeface = android.graphics.Typeface.MONOSPACE
                setPadding(0, 0, 8, 0)
            }
            
            val searchInput = android.widget.EditText(this).apply {
                hint = "Search elements..."
                setTextColor(Color.parseColor("#CCCCCC"))
                setHintTextColor(Color.parseColor("#666666"))
                setBackgroundColor(Color.parseColor("#3C3C3C"))
                setPadding(6, 4, 6, 4)
                textSize = 10f
                typeface = android.graphics.Typeface.MONOSPACE
                setSingleLine(true)
                layoutParams = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f)
            }
            
            val goButton = Button(this).apply {
                text = "Go"
                setTextColor(Color.WHITE)
                setBackgroundColor(Color.parseColor("#007ACC"))
                setPadding(8, 4, 8, 4)
                textSize = 9f
                typeface = android.graphics.Typeface.MONOSPACE
                setOnClickListener {
                    val keyword = searchInput.text.toString()
                    addConsoleLog("[SEARCH] Filtering elements: $keyword")
                    performSearch(keyword)
                }
            }
            
            searchBar.addView(filterLabel)
            searchBar.addView(searchInput)
            searchBar.addView(goButton)
            
            // Console ËæìÂá∫Âå∫Âüü
            val outputScrollView = ScrollView(this).apply {
                setBackgroundColor(Color.parseColor("#1E1E1E"))
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    dpToPx(240)
                )
            }
            
            val resultText = TextView(this).apply {
                text = "[INFO] Element Inspector Console initialized\n[DEBUG] Target: ${getAppName(targetPackage)}\n[DEBUG] Waiting for scan command..."
                setTextColor(Color.parseColor("#00FF00"))
                textSize = 10f
                typeface = android.graphics.Typeface.MONOSPACE
                setPadding(8, 8, 8, 8)
                setLineSpacing(1f, 1f)
                setTextIsSelectable(true)
            }
            
            outputScrollView.addView(resultText)
            
            // Console Áä∂ÊÄÅÊ†è
            val statusBar = LinearLayout(this).apply {
                orientation = LinearLayout.HORIZONTAL
                setBackgroundColor(Color.parseColor("#007ACC"))
                setPadding(8, 4, 8, 4)
            }
            
            val statusText = TextView(this).apply {
                text = "Ready"
                setTextColor(Color.WHITE)
                textSize = 9f
                typeface = android.graphics.Typeface.MONOSPACE
                layoutParams = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f)
            }
            
            val elementCountText = TextView(this).apply {
                text = "Elements: 0"
                setTextColor(Color.WHITE)
                textSize = 9f
                typeface = android.graphics.Typeface.MONOSPACE
            }
            
            statusBar.addView(statusText)
            statusBar.addView(elementCountText)
            
            // ÁªÑË£ÖÁïåÈù¢
            mainContainer.addView(titleBar)
            mainContainer.addView(toolBar)
            mainContainer.addView(searchBar)
            mainContainer.addView(outputScrollView)
            mainContainer.addView(statusBar)
            
            // ‰øùÂ≠òÂºïÁî®‰ª•‰æøÂêéÁª≠Êõ¥Êñ∞
            resultTextView = resultText
            statusTextView = statusText
            elementCountTextView = elementCountText
            
            floatingView = mainContainer
            
            // ËÆæÁΩÆÊÇ¨ÊµÆÁ™óÂèÇÊï∞
            val params = WindowManager.LayoutParams(
                WindowManager.LayoutParams.WRAP_CONTENT,
                WindowManager.LayoutParams.WRAP_CONTENT,
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
                    WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
                else
                    WindowManager.LayoutParams.TYPE_PHONE,
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
                PixelFormat.TRANSLUCENT
            ).apply {
                gravity = Gravity.TOP or Gravity.START
                x = 50
                y = 100
            }

            windowManager?.addView(floatingView, params)
            
            // ËÆæÁΩÆÊãñÊãΩÂäüËÉΩ
            setupDragListener(mainContainer, titleText)
            
            LogCollector.addLog("I", TAG, "‚úÖ Console ÊÇ¨ÊµÆÁ™óÂàõÂª∫ÊàêÂäü")
            showToast("‚úÖ Element Inspector Console Â∑≤ÂêØÂä®")
            
        } catch (e: Exception) {
            LogCollector.addLog("E", TAG, "‚ùå Console ÊÇ¨ÊµÆÁ™óÂàõÂª∫Â§±Ë¥•Ôºö${e.message}")
            showToast("‚ùå Console ÊÇ¨ÊµÆÁ™óÂàõÂª∫Â§±Ë¥•")
        }
    }
    
    private fun addConsoleLog(message: String) {
        handler.post {
            resultTextView?.let { textView ->
                val currentText = textView.text.toString()
                val timestamp = java.text.SimpleDateFormat("HH:mm:ss", java.util.Locale.getDefault()).format(java.util.Date())
                val newText = "$currentText\n[$timestamp] $message"
                textView.text = newText
                
                // ÊªöÂä®Âà∞Â∫ïÈÉ®
                (textView.parent as? ScrollView)?.post {
                    (textView.parent as ScrollView).fullScroll(View.FOCUS_DOWN)
                }
            }
        }
    }
    
    private fun updateStatus(status: String) {
        handler.post {
            statusTextView?.text = status
        }
    }
    
    private fun updateElementCount(count: Int) {
        handler.post {
            elementCountTextView?.text = "Elements: $count"
        }
    }
    
    private fun dpToPx(dp: Int): Int {
        return (dp * resources.displayMetrics.density).toInt()
    }
    
    private fun performDetection() {
        LogCollector.addLog("I", TAG, "üîç ÂºÄÂßãÊâßË°åÈ°µÈù¢ÂÖÉÁ¥†Ê£ÄÊµã")
        updateStatus("Scanning...")
        addConsoleLog("[SCAN] Starting element detection for ${getAppName(targetPackage)}")
        
        try {
            // Ëé∑ÂèñÊó†ÈöúÁ¢çÊúçÂä°ÂÆû‰æã
            val accessibilityService = wh.rj.aiphone.service.AIAccessibilityService.getInstance()
            if (accessibilityService == null) {
                addConsoleLog("[ERROR] Accessibility service not available")
                updateStatus("Service Error")
                showToast("‚ùå Êó†ÈöúÁ¢çÊúçÂä°Êú™ÂêØÂä®")
                return
            }
            
            addConsoleLog("[DEBUG] Accessibility service connected")
            
            // ÊâßË°åÂÖÉÁ¥†Ê£ÄÊµã
            val elements = accessibilityService.detectPageElements(false)
            
            if (elements.isEmpty()) {
                addConsoleLog("[WARN] No elements detected - page may still be loading")
                updateStatus("No Elements")
                updateElementCount(0)
                return
            }
            
            // ÊòæÁ§∫Ê£ÄÊµãÁªìÊûú
            addConsoleLog("[SUCCESS] Found ${elements.size} elements")
            updateStatus("Ready")
            updateElementCount(elements.size)
            showDetectionResults(elements)
            
        } catch (e: Exception) {
            LogCollector.addLog("E", TAG, "‚ùå Ê£ÄÊµãÊâßË°åÂ§±Ë¥•Ôºö${e.message}")
            addConsoleLog("[ERROR] Detection failed: ${e.message}")
            updateStatus("Error")
            showToast("‚ùå Ê£ÄÊµãÂ§±Ë¥•Ôºö${e.message}")
        }
    }
    
    private fun performSearch(keyword: String) {
        if (keyword.isBlank()) {
            showToast("‚ö†Ô∏è ËØ∑ËæìÂÖ•ÊêúÁ¥¢ÂÖ≥ÈîÆËØç")
            return
        }
        
        LogCollector.addLog("I", TAG, "üîé ÂºÄÂßãÊêúÁ¥¢ÂÖÉÁ¥†: $keyword")
        addConsoleLog("[SEARCH] Searching for: $keyword")
        updateStatus("Searching...")
        
        try {
            val accessibilityService = wh.rj.aiphone.service.AIAccessibilityService.getInstance()
            if (accessibilityService == null) {
                addConsoleLog("[ERROR] Accessibility service not available")
                updateStatus("Service Error")
                showToast("‚ùå Êó†ÈöúÁ¢çÊúçÂä°Êú™ÂêØÂä®")
                return
            }
            
            // ÊâßË°åÊêúÁ¥¢
            val searchResults = accessibilityService.searchElements(keyword)
            
            if (searchResults.isEmpty()) {
                addConsoleLog("[WARN] No matching elements found for: $keyword")
                updateStatus("No Matches")
                updateElementCount(0)
                showToast("‚ùå Êú™ÊâæÂà∞ÂåπÈÖçÂÖÉÁ¥†")
                return
            }
            
            // ÊòæÁ§∫ÊêúÁ¥¢ÁªìÊûú
            addConsoleLog("[SUCCESS] Found ${searchResults.size} matching elements")
            updateStatus("Ready")
            updateElementCount(searchResults.size)
            showSearchResults(keyword, searchResults)
            
        } catch (e: Exception) {
            LogCollector.addLog("E", TAG, "‚ùå ÊêúÁ¥¢Â§±Ë¥•Ôºö${e.message}")
            addConsoleLog("[ERROR] Search failed: ${e.message}")
            updateStatus("Error")
            showToast("‚ùå ÊêúÁ¥¢Â§±Ë¥•Ôºö${e.message}")
        }
    }
    
    private fun performTestLike() {
        LogCollector.addLog("I", TAG, "üëç ÊµãËØïÁÇπËµûÂäüËÉΩ")
        addConsoleLog("[CLICK] Testing like button click...")
        updateStatus("Clicking...")
        
        try {
            val accessibilityService = wh.rj.aiphone.service.AIAccessibilityService.getInstance()
            if (accessibilityService == null) {
                addConsoleLog("[ERROR] Accessibility service not available")
                updateStatus("Service Error")
                showToast("‚ùå Êó†ÈöúÁ¢çÊúçÂä°Êú™ÂêØÂä®")
                return
            }
            
            val success = accessibilityService.performLike()
            if (success) {
                addConsoleLog("[SUCCESS] Like button clicked successfully")
                updateStatus("Ready")
                showToast("‚úÖ ÁÇπËµûÊàêÂäü")
            } else {
                addConsoleLog("[WARN] Like button not found or click failed")
                updateStatus("Click Failed")
                showToast("‚ö†Ô∏è Êú™ÊâæÂà∞ÁÇπËµûÊåâÈíÆ")
            }
            
        } catch (e: Exception) {
            LogCollector.addLog("E", TAG, "‚ùå ÁÇπËµûÊµãËØïÂ§±Ë¥•Ôºö${e.message}")
            addConsoleLog("[ERROR] Like test failed: ${e.message}")
            updateStatus("Error")
            showToast("‚ùå ÁÇπËµûÊµãËØïÂ§±Ë¥•")
        }
    }
    
    private fun performSwipe() {
        LogCollector.addLog("I", TAG, "üì± ÂºÄÂßãÊâßË°åÊªëÂä®Êìç‰Ωú")
        addConsoleLog("[SWIPE] Executing swipe gesture...")
        updateStatus("Swiping...")
        
        try {
            val intent = Intent(this, wh.rj.aiphone.service.AIAccessibilityService::class.java)
            intent.putExtra("force_swipe", true)
            intent.putExtra("target_package", targetPackage)
            startService(intent)
            
            LogCollector.addLog("I", TAG, "‚úÖ ÊªëÂä®ÂëΩ‰ª§Â∑≤ÂèëÈÄÅÂà∞Êó†ÈöúÁ¢çÊúçÂä°")
            addConsoleLog("[DEBUG] Swipe command sent to accessibility service")
            
            // Âª∂ËøüÊõ¥Êñ∞Áä∂ÊÄÅ
            handler.postDelayed({
                addConsoleLog("[SUCCESS] Swipe gesture completed")
                updateStatus("Ready")
                showToast("‚úÖ ÊªëÂä®Êìç‰ΩúÂÆåÊàê")
            }, 2000)
            
        } catch (e: Exception) {
            LogCollector.addLog("E", TAG, "‚ùå ÊªëÂä®ÊâßË°åÂ§±Ë¥•Ôºö${e.message}")
            addConsoleLog("[ERROR] Swipe failed: ${e.message}")
            updateStatus("Error")
            showToast("‚ùå ÊªëÂä®Â§±Ë¥•Ôºö${e.message}")
        }
    }
    
    private fun performClick() {
        LogCollector.addLog("I", TAG, "üëÜ ÂºÄÂßãÊâßË°åÁÇπÂáªÊìç‰Ωú")
        showToast("üëÜ Ê≠£Âú®ÊâßË°åÁÇπÂáª...")
        updateResultText("üëÜ Ê≠£Âú®ÊâßË°åÁÇπÂáªÊìç‰Ωú...\nüéØ Ëá™Âä®Êü•ÊâæÂèØÁÇπÂáªÂÖÉÁ¥†")
        
        try {
            val intent = Intent(this, wh.rj.aiphone.service.AIAccessibilityService::class.java)
            intent.putExtra("auto_click", true)
            intent.putExtra("target_package", targetPackage)
            startService(intent)
            
            LogCollector.addLog("I", TAG, "‚úÖ ÁÇπÂáªÂëΩ‰ª§Â∑≤ÂèëÈÄÅÂà∞Êó†ÈöúÁ¢çÊúçÂä°")
            
            // Âª∂ËøüÊõ¥Êñ∞Áä∂ÊÄÅ
            handler.postDelayed({
                updateResultText("‚úÖ ÁÇπÂáªÊìç‰ΩúÂ∑≤ÂÆåÊàê\nüéØ ÁõÆÊ†á: ${getAppName(targetPackage)}")
                showToast("‚úÖ ÁÇπÂáªÊìç‰ΩúÂÆåÊàê")
            }, 2000)
            
        } catch (e: Exception) {
            LogCollector.addLog("E", TAG, "‚ùå ÁÇπÂáªÊâßË°åÂ§±Ë¥•Ôºö${e.message}")
            showToast("‚ùå ÁÇπÂáªÂ§±Ë¥•Ôºö${e.message}")
            updateResultText("‚ùå ÁÇπÂáªÂ§±Ë¥•Ôºö${e.message}")
        }
    }
    
    private fun showSettings() {
        LogCollector.addLog("I", TAG, "‚öôÔ∏è ÊòæÁ§∫ËÆæÁΩÆÈù¢Êùø")
        addConsoleLog("========== SYSTEM INFO ==========")
        addConsoleLog("Target app: ${getAppName(targetPackage)}")
        addConsoleLog("Package: $targetPackage")
        addConsoleLog("Console status: Active")
        addConsoleLog("Functions: All available")
        addConsoleLog("========== INFO COMPLETE ==========")
        showToast("‚öôÔ∏è ËÆæÁΩÆÈù¢Êùø")
    }
    
    private fun showDetectionResults(elements: List<wh.rj.aiphone.model.ElementInfo>) {
        LogCollector.addLog("I", TAG, "üìã ÊòæÁ§∫Ê£ÄÊµãÁªìÊûú: ${elements.size}‰∏™ÂÖÉÁ¥†")
        
        // ÊåâÈáçË¶ÅÊÄßÊòæÁ§∫Ââç8‰∏™ÈáçË¶ÅÂÖÉÁ¥†
        val importantElements = elements.filter { it.isImportant() }.take(8)
        
        addConsoleLog("========== ELEMENT SCAN RESULTS ==========")
        addConsoleLog("Total elements found: ${elements.size}")
        addConsoleLog("Important elements: ${importantElements.size}")
        
        if (importantElements.isNotEmpty()) {
            addConsoleLog("---------- TOP ELEMENTS ----------")
            importantElements.forEach { element ->
                val typeStr = when (element.elementType) {
                    wh.rj.aiphone.model.ElementInfo.ElementType.LIKE_BUTTON -> "LIKE"
                    wh.rj.aiphone.model.ElementInfo.ElementType.FOLLOW_BUTTON -> "FOLLOW"
                    wh.rj.aiphone.model.ElementInfo.ElementType.COMMENT_BUTTON -> "COMMENT"
                    wh.rj.aiphone.model.ElementInfo.ElementType.SHARE_BUTTON -> "SHARE"
                    wh.rj.aiphone.model.ElementInfo.ElementType.PLAY_BUTTON -> "PLAY"
                    wh.rj.aiphone.model.ElementInfo.ElementType.USER_AVATAR -> "AVATAR"
                    else -> "OTHER"
                }
                
                val displayText = element.text?.take(20) ?: element.contentDescription?.take(20) ?: "no_text"
                addConsoleLog("[$typeStr] \"$displayText\" at (${element.centerX},${element.centerY})")
            }
            
            // ÊòæÁ§∫ÁªüËÆ°‰ø°ÊÅØ
            val typeStats = elements.groupBy { it.elementType }
            addConsoleLog("---------- ELEMENT STATS ----------")
            typeStats.forEach { (type, list) ->
                if (list.isNotEmpty()) {
                    val typeStr = when (type) {
                        wh.rj.aiphone.model.ElementInfo.ElementType.LIKE_BUTTON -> "LIKE"
                        wh.rj.aiphone.model.ElementInfo.ElementType.FOLLOW_BUTTON -> "FOLLOW"
                        wh.rj.aiphone.model.ElementInfo.ElementType.COMMENT_BUTTON -> "COMMENT"
                        wh.rj.aiphone.model.ElementInfo.ElementType.SHARE_BUTTON -> "SHARE"
                        else -> "OTHER"
                    }
                    addConsoleLog("$typeStr: ${list.size} elements")
                }
            }
            
        } else {
            addConsoleLog("[WARN] No important elements detected")
            addConsoleLog("Total elements: ${elements.size}")
            addConsoleLog("Suggestion: Try using search filters")
        }
        
        addConsoleLog("========== SCAN COMPLETE ==========")
        showToast("üìã Ê£ÄÊµãÂÆåÊàê: ${elements.size}‰∏™ÂÖÉÁ¥†")
    }
    
    private fun showSearchResults(keyword: String, results: List<wh.rj.aiphone.model.ElementInfo>) {
        LogCollector.addLog("I", TAG, "üìã ÊòæÁ§∫ÊêúÁ¥¢ÁªìÊûú: ${results.size}‰∏™ÂåπÈÖç")
        
        addConsoleLog("========== SEARCH RESULTS ==========")
        addConsoleLog("Query: \"$keyword\"")
        addConsoleLog("Matches found: ${results.size}")
        
        // ÊòæÁ§∫Ââç6‰∏™ÊêúÁ¥¢ÁªìÊûú
        results.take(6).forEachIndexed { index, element ->
            val typeStr = when (element.elementType) {
                wh.rj.aiphone.model.ElementInfo.ElementType.LIKE_BUTTON -> "LIKE"
                wh.rj.aiphone.model.ElementInfo.ElementType.FOLLOW_BUTTON -> "FOLLOW"
                wh.rj.aiphone.model.ElementInfo.ElementType.COMMENT_BUTTON -> "COMMENT"
                wh.rj.aiphone.model.ElementInfo.ElementType.SHARE_BUTTON -> "SHARE"
                wh.rj.aiphone.model.ElementInfo.ElementType.PLAY_BUTTON -> "PLAY"
                wh.rj.aiphone.model.ElementInfo.ElementType.USER_AVATAR -> "AVATAR"
                else -> "OTHER"
            }
            
            val displayText = element.text?.take(20) ?: element.contentDescription?.take(20) ?: "no_text"
            val clickable = if (element.isClickable) "clickable" else "not_clickable"
            
            addConsoleLog("${index + 1}. [$typeStr] \"$displayText\" at (${element.centerX},${element.centerY}) - $clickable")
        }
        
        if (results.size > 6) {
            addConsoleLog("... and ${results.size - 6} more results")
        }
        
        addConsoleLog("========== SEARCH COMPLETE ==========")
        showToast("üîé ÊâæÂà∞ ${results.size} ‰∏™ÂåπÈÖçÂÖÉÁ¥†")
    }
    
    private fun updateResultText(text: String) {
        floatingView?.let { view ->
            if (view is LinearLayout && view.childCount >= 3) {
                val textView = view.getChildAt(2) as? TextView
                textView?.text = text
            }
        }
    }
    
    private fun showToast(message: String) {
        try {
            handler.post {
                Toast.makeText(this@FloatingWindowService, message, Toast.LENGTH_SHORT).show()
            }
            LogCollector.addLog("I", TAG, "Toast: $message")
        } catch (e: Exception) {
            LogCollector.addLog("E", TAG, "ToastÂ§±Ë¥•: $message - ${e.message}")
        }
    }
    
    private fun getAppName(packageName: String): String {
        return try {
            val pm = packageManager
            val appInfo = pm.getApplicationInfo(packageName, 0)
            pm.getApplicationLabel(appInfo).toString()
        } catch (e: Exception) {
            packageName.takeIf { it.isNotEmpty() } ?: "Êú™Áü•Â∫îÁî®"
        }
    }

    private fun setupDragListener(view: View, dragHandle: View) {
        var lastX = 0
        var lastY = 0
        
        dragHandle.setOnTouchListener { _, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    lastX = event.rawX.toInt()
                    lastY = event.rawY.toInt()
                    true
                }
                MotionEvent.ACTION_MOVE -> {
                    val nowX = event.rawX.toInt()
                    val nowY = event.rawY.toInt()
                    val movedX = nowX - lastX
                    val movedY = nowY - lastY
                    lastX = nowX
                    lastY = nowY
                    
                    val params = view.layoutParams as WindowManager.LayoutParams
                    params.x += movedX
                    params.y += movedY
                    windowManager?.updateViewLayout(view, params)
                    true
                }
                else -> false
            }
        }
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "AIÂä©ÊâãÊÇ¨ÊµÆÁ™ó",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "AIËá™Âä®ÂåñÂä©ÊâãÊÇ¨ÊµÆÁ™óÊúçÂä°"
                setShowBadge(false)
            }
            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager.createNotificationChannel(channel)
        }
    }

    private fun startForegroundNotification() {
        val notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("ü§ñ AIÂä©ÊâãËøêË°å‰∏≠")
            .setContentText("ÁõÆÊ†áÂ∫îÁî®: ${getAppName(targetPackage)}")
            .setSmallIcon(R.mipmap.ic_launcher)
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .setOngoing(true)
            .build()

        startForeground(2, notification)
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            floatingView?.let { windowManager?.removeView(it) }
        } catch (e: Exception) {
            LogCollector.addLog("E", TAG, "ÁßªÈô§ÊÇ¨ÊµÆÁ™óÂ§±Ë¥•: ${e.message}")
        }
        instance = null
        LogCollector.addLog("I", TAG, "üõë ÊÇ¨ÊµÆÁ™óÊúçÂä°Â∑≤ÈîÄÊØÅ")
    }

    override fun onBind(intent: Intent?): IBinder? = null
} 